// Copyright 2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-pluginrpc-go. DO NOT EDIT.
//
// Source: buf/plugin/generate/v1/generate_service.proto

package v1pluginrpc

import (
	v1 "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/generate/v1"
	context "context"
	fmt "fmt"
	pluginrpc "pluginrpc.com/pluginrpc"
)

// This is a compile-time assertion to ensure that this generated file and the pluginrpc package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of pluginrpc newer than the one compiled into your binary. You can fix
// the problem by either regenerating this code with an older version of pluginrpc or updating the
// pluginrpc version compiled into your binary.
const _ = pluginrpc.IsAtLeastVersion0_1_0

const (
	// GenerateServiceGeneratePath is the path of the GenerateService's Generate RPC.
	GenerateServiceGeneratePath = "/buf.plugin.generate.v1.GenerateService/Generate"
)

// GenerateServiceSpecBuilder builds a Spec for the buf.plugin.generate.v1.GenerateService service.
type GenerateServiceSpecBuilder struct {
	Generate []pluginrpc.ProcedureOption
}

// Build builds a Spec for the buf.plugin.generate.v1.GenerateService service.
func (s GenerateServiceSpecBuilder) Build() (pluginrpc.Spec, error) {
	procedures := make([]pluginrpc.Procedure, 0, 1)
	procedure, err := pluginrpc.NewProcedure(GenerateServiceGeneratePath, s.Generate...)
	if err != nil {
		return nil, err
	}
	procedures = append(procedures, procedure)
	return pluginrpc.NewSpec(procedures...)
}

// GenerateServiceClient is a client for the buf.plugin.generate.v1.GenerateService service.
type GenerateServiceClient interface {
	// Generate.
	Generate(context.Context, *v1.GenerateRequest, ...pluginrpc.CallOption) (*v1.GenerateResponse, error)
}

// NewGenerateServiceClient constructs a client for the buf.plugin.generate.v1.GenerateService
// service.
func NewGenerateServiceClient(client pluginrpc.Client) (GenerateServiceClient, error) {
	return &generateServiceClient{
		client: client,
	}, nil
}

// GenerateServiceHandler is an implementation of the buf.plugin.generate.v1.GenerateService
// service.
type GenerateServiceHandler interface {
	// Generate.
	Generate(context.Context, *v1.GenerateRequest) (*v1.GenerateResponse, error)
}

// GenerateServiceServer serves the buf.plugin.generate.v1.GenerateService service.
type GenerateServiceServer interface {
	// Generate.
	Generate(context.Context, pluginrpc.HandleEnv, ...pluginrpc.HandleOption) error
}

// NewGenerateServiceServer constructs a server for the buf.plugin.generate.v1.GenerateService
// service.
func NewGenerateServiceServer(handler pluginrpc.Handler, generateServiceHandler GenerateServiceHandler) GenerateServiceServer {
	return &generateServiceServer{
		handler:                handler,
		generateServiceHandler: generateServiceHandler,
	}
}

// RegisterGenerateServiceServer registers the server for the buf.plugin.generate.v1.GenerateService
// service.
func RegisterGenerateServiceServer(serverRegistrar pluginrpc.ServerRegistrar, generateServiceServer GenerateServiceServer) {
	serverRegistrar.Register(GenerateServiceGeneratePath, generateServiceServer.Generate)
}

// *** PRIVATE ***

// generateServiceClient implements GenerateServiceClient.
type generateServiceClient struct {
	client pluginrpc.Client
}

// Generate calls buf.plugin.generate.v1.GenerateService.Generate.
func (c *generateServiceClient) Generate(ctx context.Context, req *v1.GenerateRequest, opts ...pluginrpc.CallOption) (*v1.GenerateResponse, error) {
	res := &v1.GenerateResponse{}
	if err := c.client.Call(ctx, GenerateServiceGeneratePath, req, res, opts...); err != nil {
		return nil, err
	}
	return res, nil
}

// generateServiceServer implements GenerateServiceServer.
type generateServiceServer struct {
	handler                pluginrpc.Handler
	generateServiceHandler GenerateServiceHandler
}

// Generate calls buf.plugin.generate.v1.GenerateService.Generate.
func (c *generateServiceServer) Generate(ctx context.Context, handleEnv pluginrpc.HandleEnv, options ...pluginrpc.HandleOption) error {
	return c.handler.Handle(
		ctx,
		handleEnv,
		&v1.GenerateRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1.GenerateRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1.GenerateRequest", anyReq)
			}
			return c.generateServiceHandler.Generate(ctx, req)
		},
		options...,
	)
}
