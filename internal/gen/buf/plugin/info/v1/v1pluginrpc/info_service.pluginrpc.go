// Copyright 2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-pluginrpc-go. DO NOT EDIT.
//
// Source: buf/plugin/info/v1/info_service.proto

package v1pluginrpc

import (
	v1 "buf.build/gen/go/bufbuild/bufplugin/protocolbuffers/go/buf/plugin/info/v1"
	context "context"
	fmt "fmt"
	pluginrpc "pluginrpc.com/pluginrpc"
)

// This is a compile-time assertion to ensure that this generated file and the pluginrpc package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of pluginrpc newer than the one compiled into your binary. You can fix
// the problem by either regenerating this code with an older version of pluginrpc or updating the
// pluginrpc version compiled into your binary.
const _ = pluginrpc.IsAtLeastVersion0_1_0

const (
	// InfoServiceGetInfoPath is the path of the InfoService's GetInfo RPC.
	InfoServiceGetInfoPath = "/buf.plugin.info.v1.InfoService/GetInfo"
)

// InfoServiceSpecBuilder builds a Spec for the buf.plugin.info.v1.InfoService service.
type InfoServiceSpecBuilder struct {
	GetInfo []pluginrpc.ProcedureOption
}

// Build builds a Spec for the buf.plugin.info.v1.InfoService service.
func (s InfoServiceSpecBuilder) Build() (pluginrpc.Spec, error) {
	procedures := make([]pluginrpc.Procedure, 0, 1)
	procedure, err := pluginrpc.NewProcedure(InfoServiceGetInfoPath, s.GetInfo...)
	if err != nil {
		return nil, err
	}
	procedures = append(procedures, procedure)
	return pluginrpc.NewSpec(procedures)
}

// InfoServiceClient is a client for the buf.plugin.info.v1.InfoService service.
type InfoServiceClient interface {
	// GetInfo gets information about the plugin.
	GetInfo(context.Context, *v1.GetInfoRequest, ...pluginrpc.CallOption) (*v1.GetInfoResponse, error)
}

// NewInfoServiceClient constructs a client for the buf.plugin.info.v1.InfoService service.
func NewInfoServiceClient(client pluginrpc.Client) (InfoServiceClient, error) {
	return &infoServiceClient{
		client: client,
	}, nil
}

// InfoServiceHandler is an implementation of the buf.plugin.info.v1.InfoService service.
type InfoServiceHandler interface {
	// GetInfo gets information about the plugin.
	GetInfo(context.Context, *v1.GetInfoRequest) (*v1.GetInfoResponse, error)
}

// InfoServiceServer serves the buf.plugin.info.v1.InfoService service.
type InfoServiceServer interface {
	// GetInfo gets information about the plugin.
	GetInfo(context.Context, pluginrpc.HandleEnv, ...pluginrpc.HandleOption) error
}

// NewInfoServiceServer constructs a server for the buf.plugin.info.v1.InfoService service.
func NewInfoServiceServer(handler pluginrpc.Handler, infoServiceHandler InfoServiceHandler) InfoServiceServer {
	return &infoServiceServer{
		handler:            handler,
		infoServiceHandler: infoServiceHandler,
	}
}

// RegisterInfoServiceServer registers the server for the buf.plugin.info.v1.InfoService service.
func RegisterInfoServiceServer(serverRegistrar pluginrpc.ServerRegistrar, infoServiceServer InfoServiceServer) {
	serverRegistrar.Register(InfoServiceGetInfoPath, infoServiceServer.GetInfo)
}

// *** PRIVATE ***

// infoServiceClient implements InfoServiceClient.
type infoServiceClient struct {
	client pluginrpc.Client
}

// GetInfo calls buf.plugin.info.v1.InfoService.GetInfo.
func (c *infoServiceClient) GetInfo(ctx context.Context, req *v1.GetInfoRequest, opts ...pluginrpc.CallOption) (*v1.GetInfoResponse, error) {
	res := &v1.GetInfoResponse{}
	if err := c.client.Call(ctx, InfoServiceGetInfoPath, req, res, opts...); err != nil {
		return nil, err
	}
	return res, nil
}

// infoServiceServer implements InfoServiceServer.
type infoServiceServer struct {
	handler            pluginrpc.Handler
	infoServiceHandler InfoServiceHandler
}

// GetInfo calls buf.plugin.info.v1.InfoService.GetInfo.
func (c *infoServiceServer) GetInfo(ctx context.Context, handleEnv pluginrpc.HandleEnv, options ...pluginrpc.HandleOption) error {
	return c.handler.Handle(
		ctx,
		handleEnv,
		&v1.GetInfoRequest{},
		func(ctx context.Context, anyReq any) (any, error) {
			req, ok := anyReq.(*v1.GetInfoRequest)
			if !ok {
				return nil, fmt.Errorf("could not cast %T to a *v1.GetInfoRequest", anyReq)
			}
			return c.infoServiceHandler.GetInfo(ctx, req)
		},
		options...,
	)
}
